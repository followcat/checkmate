/*----- PROTECTED REGION ID(Component.java) ENABLED START -----*/
//=============================================================================
//
// file :        Component.java
//
// description : Java source for the Component class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Component are implemented in this file.
//
// project :     Checkmate
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

/*----- PROTECTED REGION END -----*/    //    Component.java

package pytango.component_1;

/*----- PROTECTED REGION ID(Component.imports) ENABLED START -----*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.ext.XLogger;
import org.slf4j.ext.XLoggerFactory;
import org.tango.DeviceState;
import org.tango.server.InvocationContext;
import org.tango.server.ServerManager;
import org.tango.server.annotation.AroundInvoke;
import org.tango.server.annotation.Attribute;
import org.tango.server.annotation.AttributeProperties;
import org.tango.server.annotation.ClassProperty;
import org.tango.server.annotation.Command;
import org.tango.server.annotation.Delete;
import org.tango.server.annotation.Device;
import org.tango.server.annotation.DeviceProperty;
import org.tango.server.annotation.DynamicManagement;
import org.tango.server.annotation.Init;
import org.tango.server.annotation.State;
import org.tango.server.annotation.StateMachine;
import org.tango.server.annotation.Status;
import org.tango.server.dynamic.DynamicManager;
import org.tango.utils.DevFailedUtils;

//    Import Tango IDL types
import fr.esrf.Tango.*;
import fr.esrf.TangoApi.DeviceProxy;

//import pytango._database;

/*----- PROTECTED REGION END -----*/    //    Component.imports

/**
 *  Component class description:
 *    C1 component device
 */

@Device
public class Component {

    private static final Logger logger = LoggerFactory.getLogger(Component.class);
    private static final XLogger xlogger = XLoggerFactory.getXLogger(Component.class);
    //========================================================
    //    Programmer's data members
    //========================================================
    /*----- PROTECTED REGION ID(Component.variables) ENABLED START -----*/
    
    //    Put static variables here
    
    /*----- PROTECTED REGION END -----*/    //    Component.variables
    /*----- PROTECTED REGION ID(Component.private) ENABLED START -----*/
    
    //    Put private variables here
    
    /*----- PROTECTED REGION END -----*/    //    Component.private

    //========================================================
    //    Property data members and related methods
    //========================================================


    //========================================================
    //    Miscellaneous methods
    //========================================================
    /**
     * Initialize the device.
     * 
     * @throws DevFailed if something fails during the device initialization.
     */
    private DeviceProxy c2_dev;
    private DeviceProxy c3_dev;

    @Init(lazyLoading = false)
    public final void initDevice() throws DevFailed {
        xlogger.entry();
        logger.debug("init");
        /*----- PROTECTED REGION ID(Component.initDevice) ENABLED START -----*/
        
        //    Put your device initialization code here
        c2_dev = new DeviceProxy("sys/component/C2");
        c3_dev = new DeviceProxy("sys/component/C3");
        
        /*----- PROTECTED REGION END -----*/    //    Component.initDevice
        xlogger.exit();
    }

    /**
     * all resources may be closed here. Collections may be also cleared.
     * 
     * @throws DevFailed if something fails during the device object delation.
     */
    @Delete
    public final void deleteDevice() throws DevFailed {
        xlogger.entry();
        /*----- PROTECTED REGION ID(Component.deleteDevice) ENABLED START -----*/
        
        //    Put your device clearing code here
        
        /*----- PROTECTED REGION END -----*/    //    Component.deleteDevice
        xlogger.exit();
    }

    /**
     * Method called before and after command and attribute calls.
     * @param ctx the invocation context
     * @throws DevFailed if something fails during the this method execution.
     */
    @AroundInvoke
    public final void aroundInvoke(final InvocationContext ctx) throws DevFailed {
        xlogger.entry(ctx);
        /*----- PROTECTED REGION ID(Component.aroundInvoke) ENABLED START -----*/
        
        //    Put aroundInvoke code here
        
        /*----- PROTECTED REGION END -----*/    //    Component.aroundInvoke
        xlogger.exit();
    }

    
    /**
     * dynamic command and attribute management. Will be injected by the framework.
     */
    @DynamicManagement
    private DynamicManager dynamicManager;
    /**
     * @param dynamicManager the DynamicManager instance 
     */
    public void setDynamicManager(final DynamicManager dynamicManager) {
        this.dynamicManager = dynamicManager;
        /*----- PROTECTED REGION ID(Component.setDynamicManager) ENABLED START -----*/
        
        //    Put your code here
        
        /*----- PROTECTED REGION END -----*/    //    Component.setDynamicManager
    }



    //========================================================
    //    Command data members and related methods
    //========================================================
    /**
     * The state of the device
    */
    @State
    private DevState state = DevState.UNKNOWN;
    /**
     * Execute command "State".
     * description: This command gets the device state (stored in its 'state' data member) and returns it to the caller.
     * @return Device state
     * @throws DevFailed if command execution failed.
     */
    public final DevState getState() throws DevFailed {
        /*----- PROTECTED REGION ID(Component.getState) ENABLED START -----*/
        
        //    Put state code here
        
        /*----- PROTECTED REGION END -----*/    //    Component.getState
        return state;
    }
    /**
     * Set the device state
     * @param state the new device state
     */
    public void setState(final DevState state) {
        this.state = state;
    }
    
    /**
     * The status of the device
     */
    @Status
    private String status = "Server is starting. The device state is unknown";
    /**
     * Execute command "Status".
     * description: This command gets the device status (stored in its 'status' data member) and returns it to the caller.
     * @return Device status
     * @throws DevFailed if command execution failed.
     */
    public final String getStatus() throws DevFailed {
        /*----- PROTECTED REGION ID(Component.getStatus) ENABLED START -----*/
        
        //    Put status code here
        
        /*----- PROTECTED REGION END -----*/    //    Component.getStatus
        return status;
    }
    /**
     * Set the device status
     * @param status the new device status
     */

    public void setStatus(final String status) {
        this.status = status;
    }
    
    public void sleep() {
        try{
            Thread.sleep(100);
        }
        catch (InterruptedException e) {}
    }
    
    /**
     * Execute command "AC".
     * description: 
     * @throws DevFailed if command execution failed.
     */
    private static Boolean c_state = true;

    @Command(name="AC", inTypeDesc="", outTypeDesc="")
    public void AC() throws DevFailed {
        xlogger.entry();
        /*----- PROTECTED REGION ID(Component.aC) ENABLED START -----*/
        
        //    Put command code here
        //DeviceProxy c2_dev = new DeviceProxy("sys/component/C2"); 
        //DeviceProxy c3_dev = new DeviceProxy("sys/component/C3"); 
        if (c_state == true) {
            toggle();
            c3_dev.command_inout("RE");
            c2_dev.command_inout("ARE");
        }
        
        /*----- PROTECTED REGION END -----*/    //    Component.aC
        xlogger.exit();
    }
    
    /**
     * Execute command "AP".
     * description: 
     * @throws DevFailed if command execution failed.
     */
    @Command(name="AP", inTypeDesc="", outTypeDesc="")
    public void AP() throws DevFailed {
        xlogger.entry();
        /*----- PROTECTED REGION ID(Component.aP) ENABLED START -----*/
        
        //    Put command code here
        c2_dev.command_inout("DA");
        
        /*----- PROTECTED REGION END -----*/    //    Component.aP
        xlogger.exit();
    }
    
    /**
     * Execute command "PP".
     * description: 
     * @throws DevFailed if command execution failed.
     */
    @Command(name="PP", inTypeDesc="", outTypeDesc="")
    public void PP() throws DevFailed {
        xlogger.entry();
        /*----- PROTECTED REGION ID(Component.pP) ENABLED START -----*/
        
        //    Put command code here
        if (c_state == false) {
            toggle();
            c2_dev.command_inout("PA");
            c3_dev.command_inout_asynch("PA");
        }
        
        /*----- PROTECTED REGION END -----*/    //    Component.pP
        xlogger.exit();
    }
    

    //========================================================
    //    Programmer's methods
    //========================================================
    /*----- PROTECTED REGION ID(Component.methods) ENABLED START -----*/
    
    //    Put your own methods here
    private void toggle(){
           c_state = !c_state;
    }
    
    /*----- PROTECTED REGION END -----*/    //    Component.methods


    /**
     * Starts the server.
     * @param args program arguments (instance_name [-v[trace level]]  [-nodb [-dlist <device name list>] [-file=fileName]])
     */
    public static void main(final String[] args) {
        ServerManager.getInstance().start(args, Component.class);
        System.out.println("------- Started -------------");
    }
}
