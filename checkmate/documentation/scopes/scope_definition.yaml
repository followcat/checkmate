branch: scope_definition
description: "Add scope definition to development branch.

    Development branches with long history are error prone.
    It is important that when opening a branch, the scope is clearly
    defined so that the life duration is under control. A clear scope
    also helps to avoid unrelated feature to be added in a branch.
    Unrelated feature should be avoided to keep the impacted set of
    files consistent, helping to prevent conflicts when concurrently
    implementing features in different branches."

backlog:
    - feature: Definition of scope using yaml
      description: "Scope definition is done using yaml syntax.

        It has a non testable description of the target of the development.
        If will highlight the benefit for the program to implement that
        target. It is used for documentation of the code released after
        development branch is merged.

        If the branch is leading to the introduction of a new module, a valid
        description could be seen as the module docstring."

      example: "
        >>> import checkmate._scope\n
        >>> sco = checkmate._scope.Scope('''\n
        ...         branch: branch_name\n
        ...         description:\n
        ...             Scope definition is linked to a development branch.''')\n
        >>> assert sco.description\n
        "


    - feature: Scope is defined as set list features
      description: "Features are breakdown of the branch target.

        The breakdown must be done so that each feature is independent
        from the ones that follow. Still each feature should be complete
        and leave the code in a state that passes the regression tests."

      example: "
        >>> import itertools\n
        >>> import checkmate._scope\n
        >>> sco = checkmate._scope.Scope('''\n
        ...         branch: branch_name\n
        ...         backlog:\n
        ...             - feature: one\n
        ...             - feature: two''')\n
        >>> assert len(itertools.tee(sco.backlog)) == 2\n
        "

    - feature: Example given in feature is testable
      description: "Feature are provided with testable example.

        The doctest will be used to confirm that the feature is implemented as
        intended and that the development can move to the next feature.

        The example format is doctest. The doctest should be written as the
        foreseable implementation during development planning. If the actual
        implementation differs, the doctest will be updated accordingly.

        When all feature doctests are runnable the development branch is ready
        to merge in its parent branch."

      example: "
        >>> import os\n
        >>> import doctest\n
        >>> import itertools\n
        >>> import checkmate._scope\n
        >>> filename = 'checkmate/documentation/scopes/scope_definition.yaml'\n
        >>> with open(filename) as _f:\n
        ...     definition = _f.read()\n
        >>> sco = checkmate._scope.Scope(definition)\n
        >>> runner = doctest.DocTestRunner()\n
        >>> for f in itertools.islice(sco.backlog, 2):\n
        ...     assert not sco.run_feature(f, runner, filename)\n
        "

    - feature: Create a scope definition from file
      description: "Covenience function to create scope from file"
      example: "
        >>> import checkmate._scope\n
        >>> filename = 'checkmate/documentation/scopes/scope_definition.yaml'\n
        >>> sco = checkmate._scope.Scope(filename=filename)\n
        >>> assert sco\n
        "

    - feature: Verify a feature by name
      description: "Allow to check a specific feature by provding its name.

        This is helpful while writing or updating scope definition features
        based on the latest implementation."

    - feature: Reference a docstring for feature doctest
      description: "Use a code docstring as reference for feature example.

        As feature are implemented, the doctest for his feature is a good
        candidate to act as a docstring. In this case, the feature example is
        put in the docstring and the scope definition is making reference to
        it."

      example: "
        >>> import doctest\n
        >>> import itertools\n
        >>> import checkmate._scope\n
        >>> filename = 'checkmate/documentation/scopes/scope_definition.yaml'\n
        >>> sco = checkmate._scope.Scope('''\n
        ...         branch: branch_name\n
        ...         backlog:\n
        ...             - feature: one\n
        ...               reference: checkmate._scope.Scope.backlog\n
        ...         ''')\n
        >>> runner = doctest.DocTestRunner()\n
        >>> for f in sco.backlog:\n
        ...     assert not sco.run_feature(f, runner, filename)\n
        "
